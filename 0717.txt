Git

분산 버전 관리 시스템 - 변화를 기록하고 추적하는 것



Git의 3요소



Working directory - 실제 작업 중인 파일들이 위치하는 영역



Staging area - Working directory에서 변경된 파일 중, 다음 버전에 포함시킬 파일들을 선택적으로 추가하거나 제외할 수 있는 중간 준비 영역



Repository - 버전 이력과 파일들이 영구적으로 저장되는 영역 모든 버전과 변경 이력이 기록



working directory → staging area = add



Add 후 파일에 설명/메모를 작성함 = commit



staging area → Repository = push





git init = 로컬 저장소 설정



\*\*remote repository\*\*



원격 저장소 - 코드와 버전 관리 이력을 온라인 상의 특정 위치에 저장하여 여러 개발자가 협업하고 코드를 공유할 수 있는 저장 공간



push



commit 이력이 없다면 push가 안됨



관리 할 버전이 없는 상태 - 대기 상태



git ignore에 있는 파일명은 로컬에 존재한다고 추정 예) 보안 파일, 무거운 파일들



한 번 git에 이력이 이는 파일은 나중에 git ignore에 작성해도 적용이 안됨



git rm —cached를 통해 git 캐시를 삭제해야 함



git은 포트폴리오 및 협업에 사용함



Q: Revert는 commit을 실행 전 상태로 만듬



그럼 100번의 commit 중 중간 commit을 revert하면 어떤 현상이 생김?



A: Error 발생 할 수 있음



\*\*git revert \& reset\*\*



git revert: commit을 없던 일로 만드는 작업



변경 사항을 안전하게 실행 취소를 목적으로 함



책임 소재와 경험치 목적



 기록 손실 방지, 기록의 무결성과 협업의 신뢰성을 높임



git reset: 특정 commit으로 되돌아가는 작업



특정 commit으로 되돌리고, 되돌아간 이후의 commit은 모두 삭제



삭제되는 commit들은 어디에 어떤 기억으로 남길지 조절 옵션: soft mixed hard



soft: 삭제된 commit을 staging area에 남김



mixed: working directory에 기록을 남김



hard: 삭제된 commit의 기록을 남김



git reflog: 삭제한 commit으로 돌아가기



git restore: modified 상태의 파일 되돌리기

